// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/executor/executorpb/executor.proto

package executorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionExecutorClient is the client API for FunctionExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionExecutorClient interface {
	ExecuteFunction(ctx context.Context, in *ExecuteFunctionRequest, opts ...grpc.CallOption) (*ExecuteFunctionResponse, error)
}

type functionExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionExecutorClient(cc grpc.ClientConnInterface) FunctionExecutorClient {
	return &functionExecutorClient{cc}
}

func (c *functionExecutorClient) ExecuteFunction(ctx context.Context, in *ExecuteFunctionRequest, opts ...grpc.CallOption) (*ExecuteFunctionResponse, error) {
	out := new(ExecuteFunctionResponse)
	err := c.cc.Invoke(ctx, "/executor.FunctionExecutor/ExecuteFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionExecutorServer is the server API for FunctionExecutor service.
// All implementations must embed UnimplementedFunctionExecutorServer
// for forward compatibility
type FunctionExecutorServer interface {
	ExecuteFunction(context.Context, *ExecuteFunctionRequest) (*ExecuteFunctionResponse, error)
	mustEmbedUnimplementedFunctionExecutorServer()
}

// UnimplementedFunctionExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionExecutorServer struct {
}

func (UnimplementedFunctionExecutorServer) ExecuteFunction(context.Context, *ExecuteFunctionRequest) (*ExecuteFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFunction not implemented")
}
func (UnimplementedFunctionExecutorServer) mustEmbedUnimplementedFunctionExecutorServer() {}

// UnsafeFunctionExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionExecutorServer will
// result in compilation errors.
type UnsafeFunctionExecutorServer interface {
	mustEmbedUnimplementedFunctionExecutorServer()
}

func RegisterFunctionExecutorServer(s grpc.ServiceRegistrar, srv FunctionExecutorServer) {
	s.RegisterService(&FunctionExecutor_ServiceDesc, srv)
}

func _FunctionExecutor_ExecuteFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionExecutorServer).ExecuteFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/executor.FunctionExecutor/ExecuteFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionExecutorServer).ExecuteFunction(ctx, req.(*ExecuteFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionExecutor_ServiceDesc is the grpc.ServiceDesc for FunctionExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "executor.FunctionExecutor",
	HandlerType: (*FunctionExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFunction",
			Handler:    _FunctionExecutor_ExecuteFunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/executor/executorpb/executor.proto",
}
